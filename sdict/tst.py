# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tst', [dirname(__file__)])
        except ImportError:
            import _tst
            return _tst
        if fp is not None:
            try:
                _mod = imp.load_module('_tst', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tst = swig_import_helper()
    del swig_import_helper
else:
    import _tst
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def create_tst_db():
  return _tst.create_tst_db()
create_tst_db = _tst.create_tst_db

def tst_put(*args):
  return _tst.tst_put(*args)
tst_put = _tst.tst_put

def tst_get(*args):
  return _tst.tst_get(*args)
tst_get = _tst.tst_get

def tst_prefix(*args):
  return _tst.tst_prefix(*args)
tst_prefix = _tst.tst_prefix

def tst_less(*args):
  return _tst.tst_less(*args)
tst_less = _tst.tst_less

def tst_greater(*args):
  return _tst.tst_greater(*args)
tst_greater = _tst.tst_greater

def tst_delete(*args):
  return _tst.tst_delete(*args)
tst_delete = _tst.tst_delete

def free_tst_db(*args):
  return _tst.free_tst_db(*args)
free_tst_db = _tst.free_tst_db

def tst_length(*args):
  return _tst.tst_length(*args)
tst_length = _tst.tst_length

def tst_all(*args):
  return _tst.tst_all(*args)
tst_all = _tst.tst_all

def tst_from_list(*args):
  return _tst.tst_from_list(*args)
tst_from_list = _tst.tst_from_list
# This file is compatible with both classic and new-style classes.


